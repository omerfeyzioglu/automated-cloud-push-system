name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, closed ]

jobs:
  build-application:
    runs-on: ubuntu-latest
    outputs:
      jar_artifact_name: application-jar-${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar-${{ github.sha }} # Corrected artifact name
          path: target/*.jar
          if-no-files-found: error

  build-and-push-docker:
    needs: build-application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/automated-cloud-push-system:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/automated-cloud-push-system:${{ github.sha }}

  deploy-jar-to-cloud:
    needs: build-application
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-application.outputs.jar_artifact_name }}

      - name: List files after download # Optional debugging step
        run: ls -R

      - name: Copy file via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_HOST }}
          username: ${{ secrets.CLOUD_USERNAME }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          port: 22
          source: "*.jar"
          target: ${{ secrets.CLOUD_TARGET_PATH }}
          strip_components: 0 # Adjust to 1 if needed based on artifact structure